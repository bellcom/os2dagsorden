<?php

/**
 * @file
 * This module implements OS2web related rules
 */
function os2web_rules_rules_action_info() {
  $account = array(
    'os2web_rules_rules_action_drupal_message' => array(
      'label' => t('Set taxonomy from user roles'),
      'group' => t('OS2web'),
      'parameter'=> array(
        'account'=> array(
        'type'=>'user',
        'label'=>t('Going to get user list'),
        'save' => TRUE,           
        ),   
      ),
    ),
  );
  return $account;
}

/**
 * Action Implementation: Show a configureable message
 * @ingroup rules
 */
function os2web_rules_rules_action_drupal_message($account) {

  # Loading user object for correct saving of user info 
  $user = user_load($account->uid);

  # We only need parts of the account data set inherited from the condition.
  $data = $account->data['ldap_authorizations']['drupal_role'];

  # Looping over the drupal roles and assigning taxonomies of the same name. Case insensitive. 
  foreach ($data as $key => $val) {
    $committeetaxid = taxonomy_get_term_by_name($key);
    $tid = key($committeetaxid); 

    # left in code for debugging: 
    #drupal_set_message('tid: ' .$tid. ' komite: ' . $key);

    # Only handle tids with data. 
    if($tid) {  
      $user_committee['und'][]['tid'] = $tid;
      $dinetid .= "," . $tid;  
      $changed_committee = array(
        'field_user_committee' => $user_committee,
      );

      # Sending logging information to wachdog for the customer to monitor. 
      watchdog('OS2web LDAP Roles', 'User: %user assigned role: %role.', array('%role' => $key, '%user'  => $user));
    } else {
      # Sending logging information to wachdog for the customer to monitor. 
      watchdog('OS2web LDAP Roles', 'User: %user NOT assigned role: %role.', array('%role' => $key, '%user'  => $user));
    }
  } 

  # Saving the user session with changes.
  user_save($user, $changed_committee);
}
